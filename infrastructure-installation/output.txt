compose.config.config.find: Using configuration files: ./docker-compose.yml
docker.auth.auth.load_config: File doesn't exist
compose.cli.command.get_client: docker-compose version 1.7.0, build 0d7bf73
docker-py version: 1.8.0
CPython version: 2.7.6
OpenSSL version: OpenSSL 1.0.1f 6 Jan 2014
compose.cli.command.get_client: Docker base_url: http://10.43.116.188:4000
compose.cli.command.get_client: Docker version: KernelVersion=3.13.0-74-generic, Os=linux, BuildTime=Wed Apr 13 05:58:31 UTC 2016, ApiVersion=1.22, Version=swarm/1.2.0, GitCommit=a6c1f14, Arch=amd64, GoVersion=go1.5.4
compose.cli.verbose_proxy.proxy_callable: docker inspect_network <- ('overlay-network')
compose.cli.verbose_proxy.proxy_callable: docker inspect_network -> {u'Containers': {u'50b101d069ffc134b1d4d8267279673d0619bc0ace1d637c7425f60afd05bc73': {u'EndpointID': u'c63bbcfec0f7a155f2015501f54edd4e144dafe0b7030979713bf9dc46ccdae2',
                                                                                       u'IPv4Address': u'10.0.0.3/24',
                                                                                       u'IPv6Address': u'',
                                                                                       u'MacAddress': u'02:42:0a:00:00:03',
                                                                                       u'Name': u'sad_ardinghelli'},
                 u'60d5170e61283051391f082924721f0c1e93d93d7a70b42e321207206fc2db7d': {u'EndpointID': u'ba822a61c7271c38a858511a89da8f1a7e0c66e26abee172f7f01875d36c0d45',
                                                                                       u'IPv4Address': u'10.0.0.2/24',
                                                                                       u'IPv6Address': u'',
                                                                                       u'MacAddress': u'02:42:0a:00:00:02',
                                                                                       u'Name': u'jovial_torvalds'},
...
compose.network.ensure: Network default declared as external. No new network will be created.
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=False, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=customer_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=booking_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_main_locks', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_main_guards', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_pricing', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_ttl_guards', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_ttl_locks', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('bachelorproject/rabbitcluster:latest')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'ArgsEscaped': True,
             u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'/bin/sh', u'-c', u'/opt/rabbit/startrabbit.sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('bachelorproject/rabbitcluster:latest')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'ArgsEscaped': True,
             u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'/bin/sh', u'-c', u'/opt/rabbit/startrabbit.sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('bachelorproject/rabbitcluster:latest')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'ArgsEscaped': True,
             u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'/bin/sh', u'-c', u'/opt/rabbit/startrabbit.sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=customer_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=booking_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_main_locks', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_main_guards', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_pricing', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.project._get_convergence_plans: cassandra-2 has upstream changes (cassandra-1)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.project._get_convergence_plans: cassandra-3 has upstream changes (cassandra-2)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_ttl_guards', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_ttl_locks', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.project._get_convergence_plans: rabbit2 has upstream changes (rabbit1)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.project._get_convergence_plans: rabbit3 has upstream changes (rabbit1, rabbit2)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.parallel.feed_queue: Pending: set([<Service: rabbit1>, <Service: seat_database_copy1>, <Service: seat_database>, <Service: seat_database_copy3>, <Service: redis_main_locks>, <Service: seat_database_copy2>, <Service: cassandra-2>, <Service: cassandra-3>, <Service: booking_database>, <Service: rabbit3>, <Service: customer_database>, <Service: redis_pricing>, <Service: redis_ttl_guards>, <Service: redis_main_guards>, <Service: cassandra-1>, <Service: redis_ttl_locks>, <Service: rabbit2>])
compose.parallel.feed_queue: Starting producer thread for <Service: rabbit1>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('bachelorproject/rabbitcluster:latest')
compose.parallel.feed_queue: Starting producer thread for <Service: seat_database_copy1>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.parallel.feed_queue: Starting producer thread for <Service: seat_database>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.parallel.feed_queue: Starting producer thread for <Service: seat_database_copy3>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.parallel.feed_queue: Starting producer thread for <Service: redis_main_locks>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.parallel.feed_queue: Starting producer thread for <Service: seat_database_copy2>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.parallel.feed_queue: Starting producer thread for <Service: booking_database>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'ArgsEscaped': True,
             u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'/bin/sh', u'-c', u'/opt/rabbit/startrabbit.sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=rabbit1', u'com.docker.compose.oneoff=False']})
compose.parallel.feed_queue: Starting producer thread for <Service: customer_database>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.parallel.feed_queue: Starting producer thread for <Service: redis_pricing>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database_copy2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('bachelorproject/rabbitcluster:latest')
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=seat_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_main_locks', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.parallel.feed_queue: Starting producer thread for <Service: redis_ttl_guards>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.parallel.feed_queue: Starting producer thread for <Service: redis_main_guards>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=booking_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=customer_database', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.parallel.feed_queue: Starting producer thread for <Service: cassandra-1>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: 291c462d77c17fa27d852da48952a18572c4b26ed3ec302f6b46323688fc088b
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'3306': ['3309']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'ArgsEscaped': True,
             u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'/bin/sh', u'-c', u'/opt/rabbit/startrabbit.sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
...
compose.parallel.feed_queue: Starting producer thread for <Service: redis_ttl_locks>
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'3306/tcp': [{'HostIp': '', 'HostPort': '3309'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_ttl_guards', u'com.docker.compose.oneoff=False']})
compose.service.create_container: Creating seat_database_copy1
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='seat_database_copy1', image='mysql', labels={u'com.docker.compose.service': u'seat_database_copy1', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '291c462d77c17fa27d852da48952a18572c4b26ed3ec302f6b46323688fc088b', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'3306/tcp': [{'HostPort': '3309', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'MYSQL_ROOT_PASSWORD=root', u'SERVICE_NAME=seat_database_copy'], volumes={}, detach=True, ports=['3306'])
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: 832ce69784a5a76a3d416ad295ae1e9ca181f9cd0c26f0568ccbedb3075dc6d3
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('mysql')
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_pricing', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'5672': ['5672'], '15672': ['15672']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.service.build_container_labels: Added config hash: 0c3d3339feaf29c78af087f9ade8735f71d1f6d4aa775f22f7d9beeee010954f
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.service.build_container_labels: Added config hash: ca0a9bce4cc6c275fb5a12da27b2c2d6538820951ca2ff01ec4d8f20813783dd
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: 2b425a5ec6ae977d7b9e672a4adab5338ee758aa842e096bc59218bece568db0
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'15672/tcp': [{'HostIp': '', 'HostPort': '15672'}],
                  '5672/tcp': [{'HostIp': '', 'HostPort': '5672'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'3306': ['3310']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_main_guards', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'3306': ['3311']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.service.build_container_labels: Added config hash: be5ff14e19f87865b8996dc7f8e6ea33f92435bd66006dce9cec3b517af991c4
compose.service.build_container_labels: Added config hash: 93a6a34ccd9563e6ddb8bee23bb055a6da4f1e088589dacc258686fac557eb0d
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-1', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'3306': ['3306']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'3306/tcp': [{'HostIp': '', 'HostPort': '3306'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.service.create_container: Creating rabbit1
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'3306/tcp': [{'HostIp': '', 'HostPort': '3310'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'3306/tcp': [{'HostIp': '', 'HostPort': '3311'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'6379': ['6379']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'3306': ['3308']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=redis_ttl_locks', u'com.docker.compose.oneoff=False']})
compose.service.create_container: Creating seat_database
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (hostname='rabbit1', name='rabbit1', image='bachelorproject/rabbitcluster:latest', labels={u'com.docker.compose.service': u'rabbit1', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '832ce69784a5a76a3d416ad295ae1e9ca181f9cd0c26f0568ccbedb3075dc6d3', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'15672/tcp': [{'HostPort': '15672', 'HostIp': ''}], '5672/tcp': [{'HostPort': '5672', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'SERVICE_5672_NAME=rabbit'], volumes={}, detach=True, ports=['5672', '15672'])
compose.service.create_container: Creating seat_database_copy2
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.service.create_container: Creating seat_database_copy3
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='seat_database_copy3', image='mysql', labels={u'com.docker.compose.service': u'seat_database_copy3', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': 'ca0a9bce4cc6c275fb5a12da27b2c2d6538820951ca2ff01ec4d8f20813783dd', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'3306/tcp': [{'HostPort': '3311', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'MYSQL_ROOT_PASSWORD=root', u'SERVICE_NAME=seat_database_copy'], volumes={}, detach=True, ports=['3306'])
compose.service.build_container_labels: Added config hash: 59db94b4f7ece9c56153942bd51e07d2eaddef2f8f73f53154ddf183029904c7
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'6379/tcp': [{'HostIp': '', 'HostPort': '6379'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'3306/tcp': [{'HostIp': '', 'HostPort': '3308'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='seat_database', image='mysql', labels={u'com.docker.compose.service': u'seat_database', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '2b425a5ec6ae977d7b9e672a4adab5338ee758aa842e096bc59218bece568db0', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'3306/tcp': [{'HostPort': '3306', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'MYSQL_ROOT_PASSWORD=root', u'SERVICE_NAME=seat_database'], volumes={}, detach=True, ports=['3306'])
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='seat_database_copy2', image='mysql', labels={u'com.docker.compose.service': u'seat_database_copy2', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '0c3d3339feaf29c78af087f9ade8735f71d1f6d4aa775f22f7d9beeee010954f', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'3306/tcp': [{'HostPort': '3310', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'MYSQL_ROOT_PASSWORD=root', u'SERVICE_NAME=seat_database_copy'], volumes={}, detach=True, ports=['3306'])
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.service.build_container_labels: Added config hash: 773692e2616e14abb0283dfcb14396c242ab20a02b5664a319c3d1f8bdf93a35
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'6379': ['6383']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.service.create_container: Creating redis_main_locks
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='redis_main_locks', image='redis', labels={u'com.docker.compose.service': u'redis_main_locks', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': 'be5ff14e19f87865b8996dc7f8e6ea33f92435bd66006dce9cec3b517af991c4', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'6379/tcp': [{'HostPort': '6379', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'SERVICE_NAME=redis_main_locks'], volumes={}, detach=True, ports=['6379'])
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'3306': ['3307']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('redis')
compose.service.create_container: Creating booking_database
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'6379/tcp': [{'HostIp': '', 'HostPort': '6383'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: cff8c6f35029e625903b9378440567bb0957825cdb6ce197ec9f63e7c407803a
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'6379': ['6381']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.service.create_container: Creating redis_ttl_guards
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='redis_ttl_guards', image='redis', labels={u'com.docker.compose.service': u'redis_ttl_guards', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '59db94b4f7ece9c56153942bd51e07d2eaddef2f8f73f53154ddf183029904c7', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'6379/tcp': [{'HostPort': '6383', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'SERVICE_NAME=redis_ttl_guards'], volumes={}, detach=True, ports=['6379'])
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='booking_database', image='mysql', labels={u'com.docker.compose.service': u'booking_database', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '93a6a34ccd9563e6ddb8bee23bb055a6da4f1e088589dacc258686fac557eb0d', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'3306/tcp': [{'HostPort': '3308', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'MYSQL_ROOT_PASSWORD=root', u'SERVICE_NAME=booking_database'], volumes={}, detach=True, ports=['3306'])
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'3306/tcp': [{'HostIp': '', 'HostPort': '3307'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'6379/tcp': [{'HostIp': '', 'HostPort': '6381'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.service.create_container: Creating redis_pricing
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='redis_pricing', image='redis', labels={u'com.docker.compose.service': u'redis_pricing', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': 'cff8c6f35029e625903b9378440567bb0957825cdb6ce197ec9f63e7c407803a', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'6379/tcp': [{'HostPort': '6381', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'SERVICE_NAME=redis_pricing'], volumes={}, detach=True, ports=['6379'])
compose.service.create_container: Creating customer_database
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='customer_database', image='mysql', labels={u'com.docker.compose.service': u'customer_database', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '773692e2616e14abb0283dfcb14396c242ab20a02b5664a319c3d1f8bdf93a35', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'3306/tcp': [{'HostPort': '3307', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'MYSQL_ROOT_PASSWORD=root', u'SERVICE_NAME=customer_database'], volumes={}, detach=True, ports=['3306'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: 97c7febfcf2b6d6badc4400554655f46e54ecdc6d74735ee5acc8ea8f8907148
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'7000': ['7000'], '9042': ['9042']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.service.build_container_labels: Added config hash: 93008250661434a4e363185176d44acfb5f28f1def2264dba6e09b6daa411388
compose.service.build_container_labels: Added config hash: 8426a8db7d2b4d44649836a98419234620cea08b61d020c8b4ba6f4ec3d11c0d
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'7000/tcp': [{'HostIp': '', 'HostPort': '7000'}],
                  '9042/tcp': [{'HostIp': '', 'HostPort': '9042'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.service.create_container: Creating cassandra-1
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'6379': ['6380']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'6379': ['6382']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'6379/tcp': [{'HostIp': '', 'HostPort': '6382'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='cassandra-1', image='cassandra', labels={u'com.docker.compose.service': u'cassandra-1', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '97c7febfcf2b6d6badc4400554655f46e54ecdc6d74735ee5acc8ea8f8907148', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'7000/tcp': [{'HostPort': '7000', 'HostIp': ''}], '9042/tcp': [{'HostPort': '9042', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'CASSANDRA_BROADCAST_ADDRESS=cassandra-1', u'SERVICE_9042_NAME=cassandra'], volumes={}, detach=True, ports=['7000', '9042'])
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'6379/tcp': [{'HostIp': '', 'HostPort': '6380'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.service.create_container: Creating redis_main_guards
compose.service.create_container: Creating redis_ttl_locks
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='redis_main_guards', image='redis', labels={u'com.docker.compose.service': u'redis_main_guards', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '93008250661434a4e363185176d44acfb5f28f1def2264dba6e09b6daa411388', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'6379/tcp': [{'HostPort': '6382', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'SERVICE_NAME=redis_main_guards'], volumes={}, detach=True, ports=['6379'])
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='redis_ttl_locks', image='redis', labels={u'com.docker.compose.service': u'redis_ttl_locks', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '8426a8db7d2b4d44649836a98419234620cea08b61d020c8b4ba6f4ec3d11c0d', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'6379/tcp': [{'HostPort': '6380', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'SERVICE_NAME=redis_ttl_locks'], volumes={}, detach=True, ports=['6379'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'f30a68fadf5fac457355d3735311606ba853dd9f8829f04996dc5a12a932d85b'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'f30a68fadf5fac457355d3735311606ba853dd9f8829f04996dc5a12a932d85b')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'mysqld'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'MYSQL_ROOT_PASSWORD=root',
                      u'SERVICE_NAME=seat_database_copy',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'f30a68fadf5fac457355d3735311606ba853dd9f8829f04996dc5a12a932d85b', 'overlay-network')
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'a1dcd5374b64dc09282286f5814a3b4119df1344f49f3a19ebe5fee4658bf679'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'a1dcd5374b64dc09282286f5814a3b4119df1344f49f3a19ebe5fee4658bf679')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'-c', u'/opt/rabbit/startrabbit.sh'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'/bin/sh', u'-c', u'/opt/rabbit/startrabbit.sh'],
             u'Domainname': u'',
             u'Entrypoint': None,
             u'Env': [u'SERVICE_5672_NAME=rabbit',
                      u'HOME=/',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'a1dcd5374b64dc09282286f5814a3b4119df1344f49f3a19ebe5fee4658bf679', 'overlay-network')
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'a5f2673c3de6784218e3dea0b376cc7108aa9ca35661cc66a9d98753ae716b09'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'a5f2673c3de6784218e3dea0b376cc7108aa9ca35661cc66a9d98753ae716b09')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'mysqld'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'MYSQL_ROOT_PASSWORD=root',
                      u'SERVICE_NAME=seat_database_copy',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'a5f2673c3de6784218e3dea0b376cc7108aa9ca35661cc66a9d98753ae716b09', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'7b1957899562a83e700e681201397a058a5fbb82383ec14844fb1b66844ace55'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'7b1957899562a83e700e681201397a058a5fbb82383ec14844fb1b66844ace55')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'redis-server'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'SERVICE_NAME=redis_main_locks',
                      u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'7b1957899562a83e700e681201397a058a5fbb82383ec14844fb1b66844ace55', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'dc0c284a912fae7719c4694955a81c48d6951b3fb3bea43031c69f0c2ca89f55'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'dc0c284a912fae7719c4694955a81c48d6951b3fb3bea43031c69f0c2ca89f55')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'redis-server'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'SERVICE_NAME=redis_pricing',
                      u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'dc0c284a912fae7719c4694955a81c48d6951b3fb3bea43031c69f0c2ca89f55', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'18564f6e5c4bfd5f1137e21a5dd0b63b4a7cfe006ad3802c15e13a5d6e48195f'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'18564f6e5c4bfd5f1137e21a5dd0b63b4a7cfe006ad3802c15e13a5d6e48195f')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'mysqld'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'MYSQL_ROOT_PASSWORD=root',
                      u'SERVICE_NAME=seat_database_copy',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'18564f6e5c4bfd5f1137e21a5dd0b63b4a7cfe006ad3802c15e13a5d6e48195f', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'67857cba4ed59b6549ca86cc42bb8b43c08aa68d48405565f0e8f63904a67924'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'67857cba4ed59b6549ca86cc42bb8b43c08aa68d48405565f0e8f63904a67924')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'redis-server'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'SERVICE_NAME=redis_ttl_guards',
                      u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'67857cba4ed59b6549ca86cc42bb8b43c08aa68d48405565f0e8f63904a67924', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'a4950c0d0a459a27ae31f5553f58420b7128b220d4d9492b64fe31082622d21a'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'a4950c0d0a459a27ae31f5553f58420b7128b220d4d9492b64fe31082622d21a')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'cassandra', u'-f'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'CASSANDRA_BROADCAST_ADDRESS=cassandra-1',
                      u'SERVICE_9042_NAME=cassandra',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'a4950c0d0a459a27ae31f5553f58420b7128b220d4d9492b64fe31082622d21a', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'd9d6f26f51f25c46fd1ac25d2af2143142dbf1049ceb515825631723e546811b'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'd9d6f26f51f25c46fd1ac25d2af2143142dbf1049ceb515825631723e546811b')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'mysqld'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'MYSQL_ROOT_PASSWORD=root',
                      u'SERVICE_NAME=customer_database',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'd9d6f26f51f25c46fd1ac25d2af2143142dbf1049ceb515825631723e546811b', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'f30a68fadf5fac457355d3735311606ba853dd9f8829f04996dc5a12a932d85b', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=['seat_database_copy3', u'f30a68fadf5f'])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'94e71a0fe0f258663a7b83986ac0f8571f27be99ad5366086c963e3683560537'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'94e71a0fe0f258663a7b83986ac0f8571f27be99ad5366086c963e3683560537')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'mysqld'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'MYSQL_ROOT_PASSWORD=root',
                      u'SERVICE_NAME=booking_database',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'94e71a0fe0f258663a7b83986ac0f8571f27be99ad5366086c963e3683560537', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'd9d6f26f51f25c46fd1ac25d2af2143142dbf1049ceb515825631723e546811b', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=['customer_database', u'd9d6f26f51f2'])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'97bcd817f243b40aa8e7f9b02e512d6791caba23e5bc454394e2c837c7d45a49'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'97bcd817f243b40aa8e7f9b02e512d6791caba23e5bc454394e2c837c7d45a49')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'mysqld'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'mysqld'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'MYSQL_ROOT_PASSWORD=root',
                      u'SERVICE_NAME=seat_database',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'97bcd817f243b40aa8e7f9b02e512d6791caba23e5bc454394e2c837c7d45a49', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'a5f2673c3de6784218e3dea0b376cc7108aa9ca35661cc66a9d98753ae716b09', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'a5f2673c3de6', 'seat_database_copy1'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'a1dcd5374b64dc09282286f5814a3b4119df1344f49f3a19ebe5fee4658bf679', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'a1dcd5374b64', 'rabbit1'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'05bfb5afce77327467c3319e47333270e0744c498b317862345082ebd38b0c48'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'05bfb5afce77327467c3319e47333270e0744c498b317862345082ebd38b0c48')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'redis-server'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'SERVICE_NAME=redis_ttl_locks',
                      u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'05bfb5afce77327467c3319e47333270e0744c498b317862345082ebd38b0c48', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'a4950c0d0a459a27ae31f5553f58420b7128b220d4d9492b64fe31082622d21a', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'a4950c0d0a45', 'cassandra-1'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'7b1957899562a83e700e681201397a058a5fbb82383ec14844fb1b66844ace55', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'7b1957899562', 'redis_main_locks'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'97bcd817f243b40aa8e7f9b02e512d6791caba23e5bc454394e2c837c7d45a49', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=['seat_database', u'97bcd817f243'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'd9d6f26f51f25c46fd1ac25d2af2143142dbf1049ceb515825631723e546811b')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'a1dcd5374b64dc09282286f5814a3b4119df1344f49f3a19ebe5fee4658bf679')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'a2897495a3c0211601d63ba17cbdf56c38cad940e199a43b9b9bea10294b4afb'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'a2897495a3c0211601d63ba17cbdf56c38cad940e199a43b9b9bea10294b4afb')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'redis-server'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'redis-server'],
             u'Domainname': u'',
             u'Entrypoint': [u'docker-entrypoint.sh'],
             u'Env': [u'SERVICE_NAME=redis_main_guards',
                      u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'a2897495a3c0211601d63ba17cbdf56c38cad940e199a43b9b9bea10294b4afb', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'94e71a0fe0f258663a7b83986ac0f8571f27be99ad5366086c963e3683560537', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'94e71a0fe0f2', 'booking_database'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'a4950c0d0a459a27ae31f5553f58420b7128b220d4d9492b64fe31082622d21a')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'18564f6e5c4bfd5f1137e21a5dd0b63b4a7cfe006ad3802c15e13a5d6e48195f', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'18564f6e5c4b', 'seat_database_copy2'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'67857cba4ed59b6549ca86cc42bb8b43c08aa68d48405565f0e8f63904a67924', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'67857cba4ed5', 'redis_ttl_guards'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'a2897495a3c0211601d63ba17cbdf56c38cad940e199a43b9b9bea10294b4afb', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=['redis_main_guards', u'a2897495a3c0'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'f30a68fadf5fac457355d3735311606ba853dd9f8829f04996dc5a12a932d85b')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'dc0c284a912fae7719c4694955a81c48d6951b3fb3bea43031c69f0c2ca89f55', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=['redis_pricing', u'dc0c284a912f'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'a5f2673c3de6784218e3dea0b376cc7108aa9ca35661cc66a9d98753ae716b09')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'7b1957899562a83e700e681201397a058a5fbb82383ec14844fb1b66844ace55')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'05bfb5afce77327467c3319e47333270e0744c498b317862345082ebd38b0c48', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'05bfb5afce77', 'redis_ttl_locks'])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'18564f6e5c4bfd5f1137e21a5dd0b63b4a7cfe006ad3802c15e13a5d6e48195f')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'97bcd817f243b40aa8e7f9b02e512d6791caba23e5bc454394e2c837c7d45a49')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'94e71a0fe0f258663a7b83986ac0f8571f27be99ad5366086c963e3683560537')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'05bfb5afce77327467c3319e47333270e0744c498b317862345082ebd38b0c48')
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.parallel.parallel_execute_iter: Finished processing: <Service: seat_database_copy3>
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: cassandra-1>
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.parallel.feed_queue: Pending: set([<Service: rabbit2>, <Service: cassandra-2>, <Service: rabbit3>, <Service: cassandra-3>])
compose.parallel.feed_queue: Starting producer thread for <Service: cassandra-2>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.parallel.parallel_execute_iter: Finished processing: <Service: customer_database>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: redis_main_locks>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-2', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: 75b27c3b6218029acd414cb47c1128a7d03be784c71e3080e3c6c491b2a17759
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'7000': ['7000'], '9042': ['9042']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'7000/tcp': [{'HostIp': '', 'HostPort': '7000'}],
                  '9042/tcp': [{'HostIp': '', 'HostPort': '9042'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'},
 'VolumesFrom': []}
compose.service.create_container: Creating cassandra-2
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='cassandra-2', image='cassandra', labels={u'com.docker.compose.service': u'cassandra-2', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '75b27c3b6218029acd414cb47c1128a7d03be784c71e3080e3c6c491b2a17759', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'7000/tcp': [{'HostPort': '7000', 'HostIp': ''}], '9042/tcp': [{'HostPort': '9042', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'unless-stopped'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'CASSANDRA_BROADCAST_ADDRESS=cassandra-2', u'SERVICE_9042_NAME=cassandra', u'CASSANDRA_SEEDS=cassandra-1'], volumes={}, detach=True, ports=['7000', '9042'])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'a2897495a3c0211601d63ba17cbdf56c38cad940e199a43b9b9bea10294b4afb')
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'67857cba4ed59b6549ca86cc42bb8b43c08aa68d48405565f0e8f63904a67924')
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.parallel.parallel_execute_iter: Finished processing: <Service: booking_database>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: seat_database_copy1>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: seat_database_copy2>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: redis_main_guards>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'dc0c284a912fae7719c4694955a81c48d6951b3fb3bea43031c69f0c2ca89f55')
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'16a51a4aa58d6e3f96515d0cac5b6727c5890a66ea77741b68655dbb5ea69a65'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'16a51a4aa58d6e3f96515d0cac5b6727c5890a66ea77741b68655dbb5ea69a65')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'cassandra', u'-f'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'CASSANDRA_BROADCAST_ADDRESS=cassandra-2',
                      u'SERVICE_9042_NAME=cassandra',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'16a51a4aa58d6e3f96515d0cac5b6727c5890a66ea77741b68655dbb5ea69a65', 'overlay-network')
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.parallel_execute_iter: Failed: <Service: rabbit1>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>, <Service: rabbit3>, <Service: rabbit2>])
compose.parallel.feed_queue: <Service: rabbit3> has upstream errors - not processing
compose.parallel.feed_queue: <Service: rabbit2> has upstream errors - not processing
compose.parallel.parallel_execute_iter: Failed: <Service: rabbit3>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.parallel_execute_iter: Failed: <Service: rabbit2>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.parallel.parallel_execute_iter: Finished processing: <Service: redis_ttl_locks>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: redis_ttl_guards>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: redis_pricing>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.parallel_execute_iter: Finished processing: <Service: seat_database>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'16a51a4aa58d6e3f96515d0cac5b6727c5890a66ea77741b68655dbb5ea69a65', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=['cassandra-2', u'16a51a4aa58d'])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'16a51a4aa58d6e3f96515d0cac5b6727c5890a66ea77741b68655dbb5ea69a65')
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.parallel.parallel_execute_iter: Finished processing: <Service: cassandra-2>
compose.parallel.feed_queue: Pending: set([<Service: cassandra-3>])
compose.parallel.feed_queue: Starting producer thread for <Service: cassandra-3>
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.cli.verbose_proxy.proxy_callable: docker containers <- (all=True, filters={u'label': [u'com.docker.compose.project=infrastructureinstallation', u'com.docker.compose.service=cassandra-3', u'com.docker.compose.oneoff=False']})
compose.cli.verbose_proxy.proxy_callable: docker containers -> (list with 0 items)
compose.cli.verbose_proxy.proxy_callable: docker inspect_image <- ('cassandra')
compose.cli.verbose_proxy.proxy_callable: docker inspect_image -> {u'Architecture': u'amd64',
 u'Author': u'',
 u'Comment': u'',
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
...
compose.service.build_container_labels: Added config hash: 7e4434e4fdb2594c5f650432c02bc592ef88cf882626c123082ac80e2faeb6e9
compose.cli.verbose_proxy.proxy_callable: docker create_host_config <- (memswap_limit=None, links=[], devices=None, pid_mode=None, log_config={'Type': u'', 'Config': {}}, cpu_quota=None, read_only=None, dns=None, volumes_from=[], port_bindings={'7000': ['7000'], '9042': ['9042']}, security_opt=None, extra_hosts=None, cgroup_parent=None, network_mode='overlay-network', shm_size=None, tmpfs=None, cap_add=None, restart_policy={u'MaximumRetryCount': 0, u'Name': u'always'}, dns_search=None, privileged=False, binds=[], ipc_mode=None, mem_limit=None, cap_drop=None, ulimits=None)
compose.cli.verbose_proxy.proxy_callable: docker create_host_config -> {'Binds': [],
 'Links': [],
 'LogConfig': {'Config': {}, 'Type': u''},
 'NetworkMode': 'overlay-network',
 'PortBindings': {'7000/tcp': [{'HostIp': '', 'HostPort': '7000'}],
                  '9042/tcp': [{'HostIp': '', 'HostPort': '9042'}]},
 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'always'},
 'VolumesFrom': []}
compose.service.create_container: Creating cassandra-3
compose.cli.verbose_proxy.proxy_callable: docker create_container <- (name='cassandra-3', image='cassandra', labels={u'com.docker.compose.service': u'cassandra-3', u'com.docker.compose.project': u'infrastructureinstallation', u'com.docker.compose.config-hash': '7e4434e4fdb2594c5f650432c02bc592ef88cf882626c123082ac80e2faeb6e9', u'com.docker.compose.version': u'1.7.0', u'com.docker.compose.oneoff': u'False', u'com.docker.compose.container-number': '1'}, host_config={'NetworkMode': 'overlay-network', 'Links': [], 'PortBindings': {'7000/tcp': [{'HostPort': '7000', 'HostIp': ''}], '9042/tcp': [{'HostPort': '9042', 'HostIp': ''}]}, 'Binds': [], 'RestartPolicy': {u'MaximumRetryCount': 0, u'Name': u'always'}, 'LogConfig': {'Type': u'', 'Config': {}}, 'VolumesFrom': []}, environment=[u'CASSANDRA_BROADCAST_ADDRESS=cassandra-3', u'SERVICE_9042_NAME=cassandra', u'CASSANDRA_SEEDS=cassandra-1'], volumes={}, detach=True, ports=['7000', '9042'])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.cli.verbose_proxy.proxy_callable: docker create_container -> {u'Id': u'd897cbc62dcb4f6b18c98e413c0f885dc51f970b5ab6e147d10dc0340ca86d34'}
compose.cli.verbose_proxy.proxy_callable: docker inspect_container <- (u'd897cbc62dcb4f6b18c98e413c0f885dc51f970b5ab6e147d10dc0340ca86d34')
compose.cli.verbose_proxy.proxy_callable: docker inspect_container -> {u'AppArmorProfile': u'',
 u'Args': [u'cassandra', u'-f'],
 u'Config': {u'AttachStderr': False,
             u'AttachStdin': False,
             u'AttachStdout': False,
             u'Cmd': [u'cassandra', u'-f'],
             u'Domainname': u'',
             u'Entrypoint': [u'/docker-entrypoint.sh'],
             u'Env': [u'CASSANDRA_BROADCAST_ADDRESS=cassandra-3',
                      u'SERVICE_9042_NAME=cassandra',
...
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network <- (u'd897cbc62dcb4f6b18c98e413c0f885dc51f970b5ab6e147d10dc0340ca86d34', 'overlay-network')
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.cli.verbose_proxy.proxy_callable: docker disconnect_container_from_network -> None
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network <- (u'd897cbc62dcb4f6b18c98e413c0f885dc51f970b5ab6e147d10dc0340ca86d34', 'overlay-network', ipv4_address=None, ipv6_address=None, links=[], aliases=[u'd897cbc62dcb', 'cassandra-3'])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.cli.verbose_proxy.proxy_callable: docker connect_container_to_network -> None
compose.cli.verbose_proxy.proxy_callable: docker start <- (u'd897cbc62dcb4f6b18c98e413c0f885dc51f970b5ab6e147d10dc0340ca86d34')
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.parallel.feed_queue: Pending: set([])
compose.cli.verbose_proxy.proxy_callable: docker start -> None
compose.parallel.parallel_execute_iter: Finished processing: <Service: cassandra-3>
compose.parallel.feed_queue: Pending: set([])

ERROR: for rabbit1  ('Connection aborted.', BadStatusLine("''",))
compose.cli.errors.exit_with_error: Couldn't connect to Docker daemon - you might need to run `docker-machine start default`.
